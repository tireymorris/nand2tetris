// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // decode instruction type
    Not(in=instruction[15], out=aInstruction);
    Not(in=aInstruction, out=cInstruction);

    // decode ALU register destination
    DMux8Way(in=true, sel=instruction[3..5], a=noDest, b=m, c=d, d=md, e=a, f=am, g=ad, h=amd);
    Or8Way(in[0]=d, in[1]=md, in[2]=ad, in[3]=amd, in[4..7]=false, out=destD);
    Or8Way(in[0]=a, in[1]=am, in[2]=ad, in[3]=amd, in[4..7]=false, out=destA);

    // decode ALU writeM/memory destination
    Or8Way(in[0]=m, in[1]=md, in[2]=am, in[3]=amd, in[4..7]=false, out=destM);
    And(a=destM, b=cInstruction, out=writeM);


    // A register
    Mux16(a=instruction, b=aluOut, sel=cInstruction, out=aIn);
    Or(a=aInstruction, b=destA, out=loadA);
    ARegister(in=aIn, load=loadA, out=aOut, out[0..14]=addressM);


    // ALU
    Mux16(a=aOut, b=inM, sel=instruction[12], out=aluMorA);

    ALU(
        x=dOut,
        y=aluMorA,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=aluOut,
        out=outM,
        zr=zr,
        ng=ng
    );


    // D register
    And(a=cInstruction, b=destD, out=loadD);
    DRegister(in=aluOut, load=loadD, out=dOut);
    

    // PC    
    // decode jumps
    DMux8Way(in=true, sel=instruction[0..2], a=nullJmp, b=jgt, c=jeq, d=jge, e=jlt, f=jne, g=jle, h=jmp);

    Not(in=zr, out=ne);
    Not(in=ng, out=ge);
    And(a=ge, b=ne, out=gt);
    Or(a=zr, b=ng, out=le);

    And(a=jgt, b=gt, out=isgt);
    And(a=jeq, b=zr, out=iseq);
    And(a=jge, b=ge, out=isge);
    And(a=jlt, b=ng, out=islt);
    And(a=jne, b=ne, out=isne);
    And(a=jle, b=le, out=isle);

    Or8Way(in[0]=false, in[1]=isgt, in[2]=iseq, in[3]=isge, in[4]=islt, in[5]=isne, in[6]=isle, in[7]=jmp, out=validJump);
    And(a=validJump, b=cInstruction, out=shouldJump);
    Not(in=shouldJump, out=noJump);

    PC(in=aOut, load=shouldJump, inc=noJump, reset=reset, out[0..14]=pc);
}